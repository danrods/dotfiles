# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

function c() {
	cd "$1" && ls
}

# find shorthand
function f() {
	find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# Clean all messages from selected channel
function cleanSlack() {
	slack-cleaner --token=xoxp-220561333281-221154527796-231195671875-06c017f80c92f8b0bfae2b67c89dc982 --message --channel "$1" --perform --rate 0 --bot
}

function sshHome() {
	ssh $3 $4 -p $2 danny@$1
}

function sshDefault(){
	#printf "Connecting using tacks : %s, %s" $1 $2
	sshHome 24.185.78.240 8099 $1 $2

}

function sshDynamic() {
	sshDefault -D 61824
}

function sshJira() {
	sshDefault -L 8088:localhost:8088 
}

function sshVNC() {
	sshDefault -L 5901:localhost:5901 -N
}

function ssh306(){
	ssh -X student@130.245.30.115 -p 130
}

function ssh311(){
	# ssh -p 130 drodrigues@130.245.155.91
	ssh -p 130 maggi@130.245.155.66
}

function ssh376(){

	server="-1"
	port=130

	if [ "$1" == 'solaris' ] ; then
		server="a-solaris9.cs.stonybrook.edu"
	elif [ "$1" == 'a-freebsd' ] ; then
		server="a-freebsd82.cs.stonybrook.edu"
	elif [ "$1" == 'b-freebsd' ] ; then
		server="b-freebsd91.cs.stonybrook.edu"
	elif [ "$1" == 'a-centos' ] ; then
		server="a-centos58.cs.stonybrook.edu"
	elif [ "$1" == 'b-centos' ] ; then
		server="b-centos59.cs.stonybrook.edu"
	elif [ "$1" == 'indiana' ] ; then
		server="a-openindiana511.cs.stonybrook.edu"
	elif [ "$1" == 'a-ubuntu' ] ; then
		server="a-ubuntu104.cs.stonybrook.edu"
	elif [ "$1" == 'b-ubuntu' ] ; then
		server="b-ubuntu104.cs.stonybrook.edu"
	elif [ "$1" == 'osx' ] ; then
		server="a-osx.cs.stonybrook.edu"
	fi
	
	if [ "$server" == '-1' ] ; then
		printf "No server found for given input $1"
		return
	fi

	ssh -p $port danierodrigu@$server

}

function wth() {
	sudo lsof -i :"$1"
}

# List all files, long format, colorized, permissions in octal
function la() {
 	ls -l  "$@" | awk '
    {
    
	integer i;
	integer k;
	k=0;
	for((i=0; i <= 8 ;i++))
    	k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i))

    if(k)
        then 
       	printf "%0o " k;
    fi
    printf " %9s  %3s %2s %5s  %6s  %s %s %s\n" $3 $6 $7 $8 $5 $9 $10 $11;
    }'
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}


# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $"import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = \"text/plain\";\nfor key, value in map.items():\n\tmap[key] = value + \";charset=UTF-8\";\nSimpleHTTPServer.test();" "$port"
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

function pastebin() {
	echo "$1" | nc vhbin.net 9999 | pbcopy
}

function get_date(){
	val="$1"
	dayOffset="$2"
	date -j -v +"$dayOffset"d -f "%Y-%m-%d" "$val" +%Y-%m-%d 
    # date -f +%Y-%m-%d -d "$1" -v +1d
}

function downloadForRange(){
	# slightly malformed input data
	# input_start=2017-06-01
	# input_end=2017-10-16
	# then=$(get_date "$1")
	# now=$(get_date "today")
	input_start="$1"
	input_end="$2"

	echo "Downloading for Range: $input_start --> $input_end"
	# After this, startdate and enddate will be valid ISO 8601 dates,
	# or the script will have aborted when it encountered unparseable data
	# such as input_end=abcd
	startdate=$(get_date "$input_start" 0)|| return
	enddate=$(get_date "$input_end" 0)|| return

	d="$startdate"

	# Clear the slate
	echo '' > /Volumes/Shared/fx/datecripts.sql

	while [ "$d" != "$enddate" ]; do 
	  # echo "Running for Date $d"
	  echo " -- /////////// DATE: $d ///////////// "
	  url="https://openexchangerates.org/api/historical/${d}.json?app_id=6b023905d49b4cd0868da78a5be84201"
	  echo "Running URL ${url}"
	  curl -s "${url}" | python /Users/kkrcentralit/PycharmProjects/FX_Data/fx_script_creater.py >> /Volumes/Shared/fx/datecripts.sql
	  echo '-- ////////////////////////////////////' >> /Volumes/Shared/fx/datecripts.sql
	  d=$(get_date "$d" 1)
	done

}

function downloadHistoricalFX(){
	# array=( '2017-06-01' '2017-07-01' '2017-08-01' '2017-09-01' '2017-10-01')
	# array=( '2017-06-30' '2017-07-31' '2017-08-31' '2017-09-30')
	array=( '2017-06-30' )
	for i in "${array[@]}"
	do
		url="https://openexchangerates.org/api/historical/${i}.json?app_id=6b023905d49b4cd0868da78a5be84201"
		echo "Running URL ${url}"
		# curl "${url}" --output /Volumes/Shared/fx/${i}.json
		(curl -s "${url}" | python /Users/kkrcentralit/PycharmProjects/FX_Data/fx_script_creater.py ) >> /Volumes/Shared/fx/datescripts.sql
	    # python /home/user/executeJobs.py {i} &> /home/user/${i}.log
	done
}


function simulateTZ(){
	export TZ="$1"

	killall "Google Chrome"
	date
	open /Applications/Google\ Chrome.app
}


# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# whois a domain or a URL
function whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ] ; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"

	# avoid recursion
					# this is the best whois server
													# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

function localip(){
	function _localip(){ echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
	export -f _localip
	local purple="\x1B\[35m" reset="\x1B\[m"
	networksetup -listallhardwareports | \
		sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
		sed -r "s/Device: (en.*)$/_localip \1/e" | \
		sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
		sed -r "s/(VLAN Configurations)|==*//g"
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath="'perl -e 'use Cwd \"abs_path\";print abs_path(shift)" "$1"
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# who is using the laptop's iSight camera?
camerausedby() {
	echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
	usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
	echo -e "Recent camera uses:\n$usedby"
}


# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
	if [[ $2 == '--good' ]]; then
	  ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
	  time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
	  rm out-static*.png
	else
	  ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
	fi
  else
	echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# turn that video into webm.
# brew reinstall ffmpeg --with-libvpx
webmify(){
	ffmpeg -i $1 -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y $2 $1.webm
}


# visual studio code. a la `subl`
code () {
	if [[ $# = 0 ]]
	then
		open -a "Visual Studio Code"
	else
		[[ $1 = /* ]] && F="$1" || F="$PWD/${1#./}"
		open -a "Visual Studio Code" --args "$F"
	fi
}

# `shellswitch [bash |zsh]`
#   Must be in /etc/shells
shellswitch () {
	chsh -s $(brew --prefix)/bin/$1
}



# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}


# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless weâ€™re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless weâ€™re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a characterâ€™s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless weâ€™re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}


# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}â€¦";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


function vidshare() {
	open http://localhost:8080
	ssh -p 8099 -L 8080:localhost:8080 danny@127.0.0.1
}

function javav(){
	local version="";
	if [ "$1" == "7" ]; then
		version="1.7.0_79";
	elif [ "$1" == "8" ]; then
		version="1.8.0_152";
	else 
		version="$1";
	fi;

	export PATH=$(echo $PATH | sed -E -e "s;:${JAVA_HOME}/bin;;" -e "s;${JAVA_HOME}/bin:?;;")

	export JAVA_HOME=$(/usr/libexec/java_home -v"${version}")
	# export JAVA="$JAVA_HOME/bin"

	export PATH="$PATH:$JAVA_HOME/bin"
	echo "Successfully Switched to Java version ${JAVA_HOME}"
}


# Function used to view maven dependencies for a particular group or all dependencies if none selected
function depends() {
	if [ $# -eq 2 ]; then
		cd "$1" && mvn dependency:tree -Dverbose -Dincludes="$2";
	elif [ $# -eq 1 ]; then
		mvn dependency:tree -Dverbose -Dincludes="$1";
	else
		mvn dependency:tree -Dverbose
	fi;
}

