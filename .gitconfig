[alias]

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	c = commit -am

	# Commit all changes
	ca = !git add -A && git commit -av

	# Clone a repository including all submodules
	cl = clone --recursive

	co = checkout
	
	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Show the diff between the latest commit and the current state
	d = "!git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	df = diff --color --color-words --abbrev

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = "!d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	
	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = !git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d

	down = pull

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"


	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
	
	graph = log --oneline --graph --color --all --decorate

	# View the current working tree status using the short format
	s = status -s

	sclone = clone --depth=1

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	reup = rebase-update

	unstage = reset HEAD --

	up = push

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[color]
	ui = always

[core]
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	diff-so-fancy = ~/bin/diff-so-fancy
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	# insanely beautiful diffs
	#pager =  diff-so-fancy | less -r
	pager = diff-highlight | diff-so-fancy | less -r


[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	commit = green bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true

[help]
	autocorrect = 1

[include]
  # For username / github token / etc
  path = ~/.gitconfig.local

[init]
	templatedir = ~/.git_template

[merge]
	tool = opendiff

[pager]
	diff = diff-so-fancy | less --tabs=1,5 -RFX
	show = diff-so-fancy | less --tabs=1,5 -RFX

# push easily. http://stackoverflow.com/a/23918418/89484
[push]
	default = current

# rewrites
[url "git@github.com:"]
	insteadOf = gh:
	insteadOf = git://github.com
	pushInsteadOf = github:
	pushInsteadOf = git://github.com/
    pushInsteadOf = https://github.com/

[url "git@gist.github.com:"]
	insteadOf = gst:
	pushInsteadOf = gist:
	pushInsteadOf = git://gist.github.com/
	pushInsteadOf = https://gist.github.com/

# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules

[url "git@github.com:danrods/"]
  insteadOf = git://github.com/danrods/

